data = read.csv("Puromycin.csv")

# Matriz de regresores
X = matrix(cbind(rep(1,12),data$Conc),12,2)
X

# Vector de los valores de respuesta observados
y <- matrix(data$Velocity)
y

# Método de Gauss-Newton 

puromycin = function(Conc,theta1,theta2){
      Vel = theta1*Conc/(theta2+Conc)
      return(as.matrix(Vel))
}

#  Teta inicial = (205,0.08)^T
theta = matrix(c(205.0,0.08),2,1)
pred = round(puromycin(data$Conc,theta[1],theta[2]),2)
pred

# Tabla 2.1 de Bates & Watts (1988), p. 41
table = as.data.frame(cbind(rep(1:length(data$Conc)), X[,2], y, pred))
names(table) = c("Obs", "x", "y", "predicted_0")

# Calcular los residuos y agregarlos a la tabla
table$residual_0 = table$y - table$predicted

# Matriz derivada
derivative = function(Conc,theta1,theta2){
      d1 = round(Conc/(theta2+Conc),4)
      d2 = round(-theta1*Conc/(theta2+Conc)^2,2)
      return(as.matrix(cbind(d1,d2)))
}

# Se calcula la matriz derivada para todas las observaciones 
# y el teta inicial.

V_0 = derivative(data$Conc,theta[1],theta[2])
V_0

table$der_theta1_0 = V_0[,1]
table$der_theta2_0 = V_0[,2]

# Cálculo de la suma de cuadrados residual para la iteración inicial.
rss0 = sum(table$residual_0^2)

# Descomposición QR de la matriz derivada V^0, con
# el resultado dado en forma compacta.
QR =qr(V_0)
QR$qr

# Reconstrucción de matrices Q y R a partir de un objeto QR.
# En este caso obtenemos Q1 y R1
Q1 = qr.Q(QR)
Q1
R1 = qr.R(QR)
R1

# V_0 = Q1 * R1
V_0_alt = Q1%*%R1
V_0_alt

# Se define un vector de residuos
z_0 = matrix(table$residual)

# Se calcula w1=Q1^T*z_0
w1 = t(Q1)%*%z_0

# Sabemos que R1*delta_0=w1. 
# Entonces delta_0=inverse(R1)*w1

delta_0 = round(solve(R1)%*%w1,3)
delta_0

#  Actualizando theta = (213.03,0.063)^T
theta1 = theta + delta_0
table$predicted_1 = round(puromycin(data$Conc,theta1[1],theta1[2]),2)

# Calculo de los nuevos residuales.

table$residual_1 = table$y - table$predicted_1

# Suma de cuadrados de los residuos para una nueva iteración
rss1 = sum(table$residual_1^2)

# rss1 (1205) es más pequeño que rss (3155). Entonces nos movemos a theta1
# a realizar otra iteración.
# El proceso se repite hasta que se produce un cambio en la
# suma de cuadrados residual.

# La convergencia se alcanza en theta = (212.7,0.0641)
theta_opt = matrix(c(212.7,0.0641),2,1)

# Valores óptimos predichos
table$predicted_opt = round(puromycin(data$Conc,theta_opt[1],theta_opt[2]),2)

# Cálculo de la matriz derivada (V^0) para todas las observaciones
# y theta óptima
V_0_opt = derivative(data$Conc,theta_opt[1],theta_opt[2])
V_0_opt

table$der_theta1_opt = V_0_opt[,1]
table$der_theta2_opt = V_0_opt[,2]

# Cálculo de residuos óptimos
table$residual_opt = table$y - table$predicted_opt

# Cálculo de la suma de cuadrados residual para la iteración inicial
rss_opt = sum(table$residual_opt^2)

# Descomposición QR de la matriz derivada V^0, con
# el resultado dado en forma compacta
QR_opt =qr(V_0_opt)
QR_opt$qr

# Reconstrucción de matrices Q y R a partir de un objeto QR.
# En este caso obtenemos Q1 y R1
Q1_opt = qr.Q(QR_opt)
Q1_opt
R1_opt = qr.R(QR_opt)
R1_opt

# Bandas para las respuestas esperadas en Conc = 0.4
y0.4 = round(puromycin(0.4,theta_opt[1],theta_opt[2]),1)
y0.4

# Vector derivado
v = derivative(0.4,theta_opt[1],theta_opt[2])
v

# v^T*inversa(R1)
vTinvR = v%*%solve(R1_opt)
vTinvR

# Norma del vector v en vR/magnitud del vector.
norm1 = sum(vTinvR*vTinvR)^0.5
norm1

# Trazar bandas para la respuesta esperada
s = sqrt(rss_opt/10)
EFE = qf(0.95,2,10)
P = 2

xnew <- seq(0,1.2,0.01) #range
ynew = theta_opt[1]*xnew/(theta_opt[2] + xnew) 
windows(width = 5.5, height = 7)
par(mfrow=c(1,1),mai=c(0.9,0.9,0.5,0.5),mgp=c(2.0,0.6,0),cex=1.2)
plot(data$Conc, data$Velocity, pch=16, col = "darkgray", las =1,
     xlab = "Concentration (ppm)",
     ylab = expression(Velocity ~ (counts/min^2)),
     xlim = c(0,1.2),
     ylim = c(0,250))
lines(xnew,ynew,lwd=2)
lines(xnew,ynew+s*norm1*sqrt(P*EFE),lwd=2,lty=3,col="black")
lines(xnew,ynew-s*norm1*sqrt(P*EFE),lwd=2,lty=3,col="black")

